var fso = new ActiveXObject('Scripting.FileSystemObject');

function dl(src, dst){
	var adTypeBinary = 1;
	var adSaveCreateOverWrite = 2;
	//# Download the URL  
	var oHTTP = new ActiveXObject("MSXML2.XMLHTTP")  ;
	oHTTP.open("GET", src, false);
	oHTTP.send();
	if(oHTTP.Status != 200){
	    //# Failed to download the file
	    WScript.Echo("Error " + oHTTP.Status + ": " + oHTTP.StatusText);
	}else{
	    var oStream = new ActiveXObject("ADODB.Stream");
	    oStream.Type = adTypeBinary;
	    oStream.Open();

	    //''# Write the downloaded byte stream to the target file
	    oStream.Write(oHTTP.ResponseBody);
	    oStream.SaveToFile(fso.BuildPath('.\\', dst), adSaveCreateOverWrite);
	    oStream.Close();
	}
}


var ForReading = 1, ForWriting = 2, ForAppending = 8;
var TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0;


dl('http://www.opengl.org/registry/api/glext.h', 'glext.h');
dl('http://www.opengl.org/registry/api/wglext.h', 'wglext.h');

var wholefile=
	fso.OpenTextFile('glext.h', ForReading, false, 0).ReadAll() +
	fso.OpenTextFile('wglext.h', ForReading, false, 0).ReadAll();

var fh = fso.OpenTextFile('GLextDefines.h', ForWriting, true, 0);
var fcpp = fso.OpenTextFile('GLextDefines.cpp', ForWriting, true, 0);
fh.Write(
	'//DO NOT EDIT\n'+
	'//Autogenerated by makeGLextDefines.h.js\n\n'+
	'#include <gl/GL.h>\n'+
	'#include "glext.h"\n'+
	'#include "wglext.h"\n'+
	'\n'+
	'//To use #include "GLextDefines.h"\n'+
	'extern void WINAPI updateGLProcs(); //Call in a current OpenGL context to redefine all extension calls\n\n\n');

fcpp.Write(
	'//DO NOT EDIT\n'+
	'//Autogenerated by makeGLextDefines.h.js\n\n'+
	'\n'+
	'\n'+
	'#pragma warning( push )\n'+
	'#pragma warning( disable : 4514 ) //unreferenced inline function has been removed\n'+
	'#pragma warning( disable : 4725 ) //instruction may be inaccurate on some Pentiums\n'+
	'#pragma warning( disable : 4189 ) //local variable is initialized but not referenced\n'+
	'#pragma warning( disable : 4101 ) //unreferenced local variable\n'+
	'#pragma warning( disable : 4820 ) //padding added after data member\n'+
	'#pragma warning( disable : 4668 ) //\'???\' is not defined as a preprocessor macro, replacing with \'0\' for \'#if/#elif\'\n'+
	'#define WIN32_LEAN_AND_MEAN\n'+
	'#define WIN32_EXTRA_LEAN \n'+
	'#define NOSERVICE\n'+
	'#define NOMCX\n'+
	'#define NOIME\n'+
	'#define NOSOUND\n'+
	'#define NOCOMM\n'+
	'#define NOKANJI\n'+
	'#define NORPC\n'+
	'#define NOPROXYSTUB\n'+
	'#define NOIMAGE\n'+
	'#define NOTAPE\n'+
	'#include <Windows.h>\n'+
	'#include <gl/GL.h>\n'+
	'#include "glext.h"\n'+
	'#include "wglext.h"\n'+
	'#pragma warning( pop )\n'+
	'\n'+
	'\n'+
	'//To use #include "GLextDefines.h"\n'+
	'void WINAPI updateGLProcs(); //Call in a current OpenGL context to redefine all extension calls\n\n\n'
	);

var a2 = wholefile.match(/ w?gl[A-Za-z0-9]+ /g);

	var defList={};
	var defArray=[];
	for(i=0; i<a2.length; i++){
		var procname=a2[i].slice(1,-1);
		if(defList.hasOwnProperty(procname)) continue;
		var typename='PFN'+procname.toUpperCase()+'PROC';
		defList[procname]=true;
		defArray.push(procname);
		fh.Write('extern '+typename+' '+procname+';\n');
		fcpp.Write(typename+' '+procname+';\n');
	}
	fcpp.Write('\n\nvoid WINAPI updateGLProcs(){\n\n#pragma warning( push )\n#pragma warning( disable : 4191 )\n\n');
	
	for(i=0; i<defArray.length; i++){
		procname=defArray[i];
		var typename='PFN'+procname.toUpperCase()+'PROC';
		fcpp.Write('\t'+procname+'=('+typename+')wglGetProcAddress("'+procname+'");\n');
	}
	fcpp.Write('\n#pragma warning( pop )\n}\n');
